You can use block expressions to add basic logic to your template such as checking if a
value exists or iterating through a list of items.

Block expressions use a helper function to perform the logic. The
syntax is the same for all block expressions and looks like this:

    {{#helper blockname}}
      {{expression}}
    {{/helper}}

Chef Habitat supports the standard [built-in helpers](http://handlebarsjs.com/builtin_helpers.html):

* `if`
* `unless`
* `each`
* `with`
* `lookup`
* `>` ([partials](http://handlebarsjs.com/partials.html))
* `log`

> **Note** Per [Handlebars Paths](http://handlebarsjs.com/#paths), when using `each` in a block expression, you must reference the parent context of that block to use any user-defined configuration values referenced _within_ the block, such as those that start with `cfg`. For example, if your block looked like the following, you must reference `cfg.port` from the parent context of the block:

    {{#each svc.members ~}}
      server {{sys.ip}}:{{../cfg.port}}
    {{/each}}

The most common block helpers that you will probably use are the `if` and `with` helpers.

The `if` helper evaluates conditional statements. The values `false`,
0, "", as well as undefined values all evaluate to false in `if`
blocks.

Here's an example that will only write out configuration for the
unixsocket tunable if a value was set by the user:

    {{#if cfg.unixsocket ~}}
    unixsocket {{cfg.unixsocket}}
    {{/if ~}}

> **Note** The `~` indicates that whitespace should be omitted when rendering

TOML allows you to create sections (called [TOML tables](https://github.com/toml-lang/toml#table)) to better organize your configuration variables. For example, your `default.toml` or user defined TOML could have a `[repl]` section for variables controlling replication behavior. Here's what that looks like:

    [repl]
    backlog-size = 200
    backlog-ttl = 100
    disable-tcp-nodelay = no

When writing your template, you can use the `with` helper to reduce duplication:

    {{#with cfg.repl ~}}
      repl-backlog-size {{backlog-size}}
      repl-backlog-ttl {{backlog-ttl}}
      repl-disable-tcp-nodelay {{disable-tcp-nodelay}}
    {{/with ~}}

Helpers can also be nested and used together in block expressions. Here is another example from the redis.config file where the `if` and `with` helpers are used together to set up `core/redis` Chef Habitat services  in a leader-follower topology.

    {{#if svc.me.follower ~}}
      replicaof {{svc.leader.sys.ip}} {{svc.leader.cfg.port}}
    {/if ~}}

Here's an example using `each` to render multiple server entries:

    {{#each cfg.servers as |server| ~}}
    server {
      host {{server.host}}
      port {{server.port}}
    }
    {{/each ~}}

You can also use `each` with `@key` and `this`. Here is an example that takes the `[env]` section of your default.toml and makes an env file you can source from your run hook:

    {{#each cfg.env ~}}
      export {{toUppercase @key}}={{this}}
    {{/each ~}}

You would specify the corresponding values in a TOML file using an
[array of tables](https://github.com/toml-lang/toml#array-of-tables)
like this:

    [[servers]]
    host = "host-1"
    port = 4545

    [[servers]]
    host = "host-2"
    port = 3434

And for both `each` and `unless`, you can use `@first` and `@last` to specify which item in an array you want to perform business logic on. For example:

    "mongo": {
      {{#each bind.database.members as |member| ~}}
        {{#if @first ~}}
          "host" : "{{member.sys.ip}}",
          "port" : "{{member.cfg.port}}"
        {{/if ~}}
      {{/each ~}}
    }

> **Note** The `@first` and `@last` variables also work with the Chef Habitat helper `eachAlive`, and in the example above, it would be preferrable to the built-in `each` helper because it checks whether the service is available before trying to retrieve any values.

For `unless`, using `@last` can also be helpful when you need to optionally include delimiters. In the example below, the IP addresses of the alive members returned by the `servers` binding is comma-separated. The logic check `{{#unless @last}}, {{/unless}}` at the end ensures that the comma is written after each element except the last element.

    {{#eachAlive bind.servers.members as |member| ~}}
      "{{member.sys.ip}}"
      {{#unless @last ~}}, {{/unless ~}} 
    {{/eachAlive ~}}]


