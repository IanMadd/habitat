# <a name="glossary-packages" id="glossary-packages" data-magellan-target="glossary-packages">Packages</a>

A package refers to a binary distribution for a given piece of software built with Chef Habitat that contains a software library or application and any configuration information for that software. It's a signed tarball with a .hart file extension created from a plan definition and built with Chef Habitat tools that can be post-processed to a specific format, such as when creating a Docker container.

Packages are identified using a four-component scheme: `origin/name/version/release`, where origin, name, version, and release are replaced with corresponding values.

**Identifier components**

- `Origin`: A name that defines a set of related packages. For example, "sample", "core", or "mycompany".
- `Name`: The name of the application or service. For example, "postgres".
- `Version`: The version number designation by the author(s) of the application or service. For example, "3.1.1", or "20160118".
- `Release`: The unique Chef Habitat id for a given version based on the timestamp pattern _YYYYMMDDhhmmss_. For example, "20160204220358" would be a package built at 22:03:58 on February 4th, 2016. Multiple releases of a given package version may exist using different dependencies and/or compiler options.


When referring to packages from either Builder or the Studio, you can refer to them in two ways: A package identifier and a fully qualified package identifier.

- A package identifier is typically specified using the two-component form `origin/name`. For example, `core/redis` or `core/openssl`.
- A fully-qualified package identifier includes all four components in the following format: `origin/name/version/release`. For example, `core/glibc/2.22/20160310192356`.


If the package identifier isn't fully specified (having less than four components), then the missing components are assumed to be the most recent versions for that package. For example:

- `core/glibc` assumes that version and release values are for the latest version of chef/glibc.

- `core/glibc/2.22` assumes that the version of chef/glibc is 2.22 and that the release is for the latest version of chef/glibc/2.22.

- `core/glibc/2.22/20160310192356` only refers to the specific package 20160310192356.

## Package Export Formats

Chef Habitat packages (.hart) can be exported in a number of different formats depending on what you need where. This is powerful because it means that you are using the same immutable artifact Chef Habitat package, but then exporting it into the format that you need to do a specific job. So when you are iterating locally in a Docker container, and then promote that package to an environment running Kubernetes, and then promote it to another datacenter that's running virtual machines, the package is identical in each location -- it's simply exported to the correct format for the job you are trying to do. 

You can read more about how to export packages, and what exporters are currently available, [here](/docs/developing-packages/#pkg-exports).
